$date
	Tue Apr  8 23:18:48 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module TestBench $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # write_to_memory $end
$var wire 32 $ write_data [31:0] $end
$var wire 32 % instruction [31:0] $end
$var wire 32 & data_read [31:0] $end
$var wire 32 ' data_address [31:0] $end
$var wire 32 ( PC [31:0] $end
$scope module dataMemory $end
$var wire 1 ! clk $end
$var wire 32 ) data_read [31:0] $end
$var wire 1 # write_enabled $end
$var wire 32 * data_to_write [31:0] $end
$var wire 32 + address [31:0] $end
$upscope $end
$scope module instMemory $end
$var wire 32 , instruction_read [31:0] $end
$var wire 32 - address [31:0] $end
$upscope $end
$scope module riscvsingle $end
$var wire 1 ! clk $end
$var wire 32 . data_read [31:0] $end
$var wire 32 / instruction [31:0] $end
$var wire 1 " reset $end
$var wire 1 0 zero $end
$var wire 1 1 write_to_register $end
$var wire 1 # write_to_memory $end
$var wire 32 2 write_data [31:0] $end
$var wire 2 3 result_source [1:0] $end
$var wire 1 4 jump $end
$var wire 2 5 immediate_source [1:0] $end
$var wire 1 6 PC_source $end
$var wire 32 7 PC [31:0] $end
$var wire 1 8 ALU_source $end
$var wire 32 9 ALU_result [31:0] $end
$var wire 3 : ALU_control [2:0] $end
$scope module controller $end
$var wire 1 6 PC_source $end
$var wire 3 ; funct3 [2:0] $end
$var wire 1 < funct7_b5 $end
$var wire 7 = opcode [6:0] $end
$var wire 1 0 zero $end
$var wire 1 1 write_to_register $end
$var wire 1 # write_to_memory $end
$var wire 2 > result_source [1:0] $end
$var wire 1 4 jump $end
$var wire 2 ? immediate_source [1:0] $end
$var wire 1 @ branch $end
$var wire 1 8 ALU_source $end
$var wire 2 A ALU_operation [1:0] $end
$var wire 3 B ALU_control [2:0] $end
$scope module ALUdecoder $end
$var wire 3 C funct3 [2:0] $end
$var wire 1 < funct7_b5 $end
$var wire 1 D is_rtype_sub $end
$var wire 1 E opcode_b5 $end
$var wire 2 F ALU_operation [1:0] $end
$var reg 3 G ALU_control [2:0] $end
$upscope $end
$scope module maindecoder $end
$var wire 7 H opcode [6:0] $end
$var wire 1 1 write_to_register $end
$var wire 1 # write_to_memory $end
$var wire 2 I result_source [1:0] $end
$var wire 1 4 jump $end
$var wire 2 J immediate_source [1:0] $end
$var wire 1 @ branch $end
$var wire 1 8 ALU_source $end
$var wire 2 K ALU_operation [1:0] $end
$var reg 11 L controls [10:0] $end
$upscope $end
$upscope $end
$scope module datapath $end
$var wire 3 M ALU_control [2:0] $end
$var wire 1 8 ALU_source $end
$var wire 1 6 PC_source $end
$var wire 1 1 RegWrite $end
$var wire 1 ! clk $end
$var wire 32 N data_read [31:0] $end
$var wire 2 O immediate_source [1:0] $end
$var wire 32 P instruction [31:0] $end
$var wire 1 " reset $end
$var wire 2 Q result_source [1:0] $end
$var wire 32 R TEST_output [31:0] $end
$var wire 32 S PC_target [31:0] $end
$var wire 32 T PC_plus4 [31:0] $end
$var wire 32 U PC_next [31:0] $end
$var wire 32 V PC [31:0] $end
$var reg 32 W ALU_result [31:0] $end
$var reg 1 X TEST_source $end
$var reg 32 Y immediate_extended [31:0] $end
$var reg 32 Z write_data [31:0] $end
$var reg 1 0 zero $end
$scope module PC_branch_adder $end
$var wire 32 [ b [31:0] $end
$var wire 32 \ sum [31:0] $end
$var wire 32 ] a [31:0] $end
$upscope $end
$scope module PC_plus4_adder $end
$var wire 32 ^ b [31:0] $end
$var wire 32 _ sum [31:0] $end
$var wire 32 ` a [31:0] $end
$upscope $end
$scope module PCmux $end
$var wire 32 a in0 [31:0] $end
$var wire 32 b in1 [31:0] $end
$var wire 1 6 sel $end
$var wire 32 c out [31:0] $end
$var parameter 32 d WIDTH $end
$upscope $end
$scope module PCmux2 $end
$var wire 64 e in [63:0] $end
$var wire 1 X sel $end
$var parameter 32 f N $end
$var parameter 32 g WIDTH $end
$var reg 32 h out [31:0] $end
$upscope $end
$scope module PCregister $end
$var wire 1 ! clk $end
$var wire 32 i d [31:0] $end
$var wire 1 " reset $end
$var parameter 32 j WIDTH $end
$var reg 32 k q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 j
b100000 g
b10 f
b100000 d
$end
#0
$dumpvars
b0 k
bx i
b100 h
bx00000000000000000000000000000100 e
bx c
bx b
b100 a
b0 `
b100 _
b100 ^
b0 ]
bx \
bx [
bx Z
bx Y
0X
bx W
b0 V
bx U
b100 T
bx S
b100 R
bx Q
b10100000000000100010011 P
bx O
bx N
b0 M
bx L
bx K
bx J
bx I
b10011 H
b0 G
bx F
0E
0D
b0 C
b0 B
bx A
x@
bx ?
bx >
b10011 =
0<
b0 ;
b0 :
bx 9
x8
b0 7
x6
bx 5
x4
bx 3
bx 2
x1
x0
b10100000000000100010011 /
bx .
b0 -
b10100000000000100010011 ,
bx +
bx *
bx )
b0 (
bx '
bx &
b10100000000000100010011 %
bx $
x#
1"
0!
$end
#5
bx R
bx h
1!
1X
#10
b100 R
b100 h
0!
0X
#15
bx R
bx h
1!
1X
#20
b100 R
b100 h
0!
0X
#22
0"
#25
xD
bx :
bx B
bx G
bx M
xE
x<
bx ;
bx C
bx =
bx H
bx %
bx ,
bx /
bx P
bx e
bx T
bx _
bx a
bx (
bx -
bx 7
bx V
bx ]
bx `
bx k
bx R
bx h
1!
1X
#30
0!
0X
#35
1!
1X
#40
0!
0X
#45
1!
1X
#50
0!
0X
#55
1!
1X
#60
0!
0X
#65
1!
1X
#70
0!
0X
#75
1!
1X
#80
0!
0X
#85
1!
1X
#90
0!
0X
#95
1!
1X
#100
0!
0X
#105
1!
1X
#110
0!
0X
#115
1!
1X
#120
0!
0X
#125
1!
1X
#130
0!
0X
#135
1!
1X
#140
0!
0X
#145
1!
1X
#150
0!
0X
#155
1!
1X
#160
0!
0X
#165
1!
1X
#170
0!
0X
#175
1!
1X
#180
0!
0X
#185
1!
1X
#190
0!
0X
#195
1!
1X
#200
0!
0X
#205
1!
1X
#210
0!
0X
#215
1!
1X
#220
0!
0X
#225
1!
1X
#230
0!
0X
#235
1!
1X
#240
0!
0X
#245
1!
1X
#250
0!
0X
#255
1!
1X
#260
0!
0X
#265
1!
1X
#270
0!
0X
#275
1!
1X
#280
0!
0X
#285
1!
1X
#290
0!
0X
#295
1!
1X
#300
0!
0X
#305
1!
1X
#310
0!
0X
#315
1!
1X
#320
0!
0X
#325
1!
1X
#330
0!
0X
#335
1!
1X
#340
0!
0X
#345
1!
1X
#350
0!
0X
#355
1!
1X
#360
0!
0X
#365
1!
1X
#370
0!
0X
#375
1!
1X
#380
0!
0X
#385
1!
1X
#390
0!
0X
#395
1!
1X
#400
0!
0X
#405
1!
1X
#410
0!
0X
#415
1!
1X
#420
0!
0X
#425
1!
1X
#430
0!
0X
#435
1!
1X
#440
0!
0X
#445
1!
1X
#450
0!
0X
#455
1!
1X
#460
0!
0X
#465
1!
1X
#470
0!
0X
#475
1!
1X
#480
0!
0X
#485
1!
1X
#490
0!
0X
#495
1!
1X
#500
0!
0X
